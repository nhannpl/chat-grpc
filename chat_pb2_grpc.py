# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatStub(object):
    """no stream
    rpc Login(User) returns (Validation) {}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListChatRooms = channel.unary_stream(
                '/chat.Chat/ListChatRooms',
                request_serializer=chat__pb2.User.SerializeToString,
                response_deserializer=chat__pb2.ChatRoom.FromString,
                )
        self.ListUserRoom = channel.unary_stream(
                '/chat.Chat/ListUserRoom',
                request_serializer=chat__pb2.RequestUserRoomList.SerializeToString,
                response_deserializer=chat__pb2.UserListResponse.FromString,
                )
        self.JoinChat = channel.unary_stream(
                '/chat.Chat/JoinChat',
                request_serializer=chat__pb2.JoinChatRequest.SerializeToString,
                response_deserializer=chat__pb2.JoinChatResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/chat.Chat/SendMessage',
                request_serializer=chat__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.TerminateStream = channel.unary_unary(
                '/chat.Chat/TerminateStream',
                request_serializer=chat__pb2.User.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.ResetStream = channel.unary_unary(
                '/chat.Chat/ResetStream',
                request_serializer=chat__pb2.User.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.CreateRoom = channel.unary_unary(
                '/chat.Chat/CreateRoom',
                request_serializer=chat__pb2.RequestCreateNewRoom.SerializeToString,
                response_deserializer=chat__pb2.Validation.FromString,
                )
        self.LeaveRoom = channel.unary_unary(
                '/chat.Chat/LeaveRoom',
                request_serializer=chat__pb2.RequestLeaveRoom.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )


class ChatServicer(object):
    """no stream
    rpc Login(User) returns (Validation) {}
    """

    def ListChatRooms(self, request, context):
        """rpc Messaging(stream StreamRequest) returns (StreamResponse){}

        1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUserRoom(self, request, context):
        """2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinChat(self, request, context):
        """3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRoom(self, request, context):
        """4
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveRoom(self, request, context):
        """6 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListChatRooms': grpc.unary_stream_rpc_method_handler(
                    servicer.ListChatRooms,
                    request_deserializer=chat__pb2.User.FromString,
                    response_serializer=chat__pb2.ChatRoom.SerializeToString,
            ),
            'ListUserRoom': grpc.unary_stream_rpc_method_handler(
                    servicer.ListUserRoom,
                    request_deserializer=chat__pb2.RequestUserRoomList.FromString,
                    response_serializer=chat__pb2.UserListResponse.SerializeToString,
            ),
            'JoinChat': grpc.unary_stream_rpc_method_handler(
                    servicer.JoinChat,
                    request_deserializer=chat__pb2.JoinChatRequest.FromString,
                    response_serializer=chat__pb2.JoinChatResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.SendMessageRequest.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'TerminateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateStream,
                    request_deserializer=chat__pb2.User.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'ResetStream': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetStream,
                    request_deserializer=chat__pb2.User.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'CreateRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRoom,
                    request_deserializer=chat__pb2.RequestCreateNewRoom.FromString,
                    response_serializer=chat__pb2.Validation.SerializeToString,
            ),
            'LeaveRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveRoom,
                    request_deserializer=chat__pb2.RequestLeaveRoom.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.Chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chat(object):
    """no stream
    rpc Login(User) returns (Validation) {}
    """

    @staticmethod
    def ListChatRooms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.Chat/ListChatRooms',
            chat__pb2.User.SerializeToString,
            chat__pb2.ChatRoom.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUserRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.Chat/ListUserRoom',
            chat__pb2.RequestUserRoomList.SerializeToString,
            chat__pb2.UserListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.Chat/JoinChat',
            chat__pb2.JoinChatRequest.SerializeToString,
            chat__pb2.JoinChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/SendMessage',
            chat__pb2.SendMessageRequest.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/TerminateStream',
            chat__pb2.User.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/ResetStream',
            chat__pb2.User.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/CreateRoom',
            chat__pb2.RequestCreateNewRoom.SerializeToString,
            chat__pb2.Validation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/LeaveRoom',
            chat__pb2.RequestLeaveRoom.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
